plugins {
	id "dev.architectury.loom" version "0.12.0-SNAPSHOT"
	id 'maven-publish'
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply from: 'https://files.saps.dev/ci/git-md-changelog.gradle'

def ENV = System.getenv()

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = 17

version = "${mod_version}-build.${ENV.GITHUB_RUN_NUMBER ?: 9999}"
archivesBaseName = project.archives_base_name
group = project.maven_group

// needs to be done AFTER version is set
apply from: "https://raw.githubusercontent.com/FTBTeam/mods-meta/main/gradle/publishing.gradle"

loom {
	silentMojangMappingsLicense()

	forge {
		mixinConfigs = [
		]

		dataGen {
			mod project.mod_id
		}

		launches {
			data {
				arg "--existing", file("src/main/resources").absolutePath
			}
		}
	}
}

repositories {
	maven {
		url "https://maven.architectury.dev/"
		content {
			includeGroup "dev.architectury"
			includeGroup "me.shedaniel"
			includeGroup "me.shedaniel.cloth"
		}
	}

	maven {
		url "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}

	maven {
		url "https://maven.saps.dev/minecraft"
		content {
			includeGroup "dev.latvian.mods"
			includeGroup "dev.ftb.mods"
			includeGroup "io.alwa.mods"
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
	mappings loom.officialMojangMappings()
	forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
	modApi("dev.architectury:architectury-forge:${rootProject.architectury_version}")

	modLocalRuntime modImplementation("me.shedaniel:RoughlyEnoughItems-forge:${rootProject.rei_version}")
	modLocalRuntime modCompileOnly("me.shedaniel:RoughlyEnoughItems-plugin-compatibilities-forge:${rootProject.rei_version}")

	modImplementation "dev.latvian.mods:kubejs-forge:${rootProject.kubejs_version}"
	modImplementation "dev.latvian.mods:rhino-forge:${rootProject.rhino_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/mods.toml") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}

	manifest {
		attributes([
				"Specification-Title"     : project.mod_id,
				"Specification-Vendor"    : project.mod_author,
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : version,
				"Implementation-Vendor"   : project.mod_author,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

publishing {
	publications {
		mavenForge(MavenPublication) {
			artifactId = rootProject.archivesBaseName
			from components.java
		}
	}

	repositories {
		if (ftbPublishing.ftbToken) {
			maven {
				url ftbPublishing.ftbURL
				credentials {
					username = ftbPublishing.ftbUser
					password = ftbPublishing.ftbToken
				}
			}
		}

		if (ftbPublishing.sapsToken) {
			maven {
				url ftbPublishing.sapsURL
				credentials {
					username = ftbPublishing.sapsUser
					password = ftbPublishing.sapsToken
				}
			}
		}
	}
}

if (ENV.CURSEFORGE_KEY) {
	curseforge {
		apiKey = ENV.CURSEFORGE_KEY
		project {
			id = project.curseforge_id
			releaseType = ftbPublishing.relType
			addGameVersion "Forge"
			addGameVersion project.minecraft_version
			mainArtifact(remapJar.archiveFile)
			changelog = ENV.CHANGELOG   // expected to exist if ENV.CURSEFORGE does
			changelogType = 'markdown'
		}
	}
}
